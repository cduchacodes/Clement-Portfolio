/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Solar Impulse (https://sketchfab.com/solarimpulse)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/solar-impulse-flight-path-298e1ac1fdb048e892d036d588d4322c
Title: Solar Impulse Flight Path
*/


import { useRef, useEffect } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame, useThree } from '@react-three/fiber'
import { a } from '@react-spring/three'
import earthScene from '../assets/3d/eGlobe.glb';
import Sky from './Stars';



const Earth = ({isRotating, setIsRotating, setCurrentStage, setDeltaX, setDeltaY, ...props}) => {
  const earthRef = useRef();
  

  const { gl, viewport } = useThree();
  const { nodes, materials } = useGLTF(earthScene);

  // Use a ref for the last mouse x,y position
  const lastX = useRef(0);
  const lastY = useRef(0);
  // Use a ref for rotation speed
  const rotationSpeedX = useRef(0);
  const rotationSpeedY = useRef(0);
  const rotationSpeedZ = useRef(0);

  // Define a damping factor to control rotation damping
  const dampingFactor = 0.95;

  const handlePointerDown = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(true);
  
    const clientX = e.touches ? e.touches[0].clientX : e.clientX;
    const clientY = e.touches ? e.touches[0].clientY : e.clientY;

    lastX.current = clientX;
    lastY.current = clientY;
  }
  
  const handlePointerUp = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(false);
  }
  
  const handlePointerMove = (e) => {
    e.stopPropagation();
    e.preventDefault();
  
    if(isRotating){
      const clientX = e.touches ? e.touches[0].clientX : e.clientX;
      const clientY = e.touches ? e.touches[0].clientY : e.clientY;

      const deltaX = (clientX-lastX.current)/viewport.width;
      const deltaY = (clientY-lastY.current)/viewport.height;


      earthRef.current.rotation.x+=deltaY*0.01*Math.PI;
      earthRef.current.rotation.x=earthRef.current.rotation.x%(2*Math.PI);
      
      
      //blend y and z rotation
      const rotatin = earthRef.current.rotation.x % (2*Math.PI);
      //const blendFactor = Math.sin(rotatin)
      earthRef.current.rotation.y+=Math.cos(rotatin)*deltaX*0.01*Math.PI;
      earthRef.current.rotation.z-=Math.sin(rotatin)*deltaX*0.01*Math.PI;
      earthRef.current.rotation.y=earthRef.current.rotation.y%(2*Math.PI);
      earthRef.current.rotation.z=earthRef.current.rotation.z%(2*Math.PI);

      lastX.current = clientX;
      lastY.current = clientY;

      rotationSpeedX.current=deltaY*0.01*Math.PI;
      rotationSpeedY.current=Math.cos(rotatin)*deltaX*0.01*Math.PI;
      rotationSpeedZ.current=Math.sin(rotatin)*deltaX*0.01*Math.PI*-1;
      
      setDeltaX(deltaX);
      setDeltaY(deltaY);
      
    }
  }


  const handleKeyDown = (e) => {
    const rotatin = earthRef.current.rotation.x % Math.PI;
      
    if(e.key == 'ArrowRight'){
        if(!isRotating) setIsRotating(true);
        earthRef.current.rotation.y+=Math.cos(rotatin)*0.01*Math.PI;
        earthRef.current.rotation.z-=Math.sin(rotatin)*0.01*Math.PI;
    } else if(e.key == 'ArrowLeft'){
        if(!isRotating) setIsRotating(true);
        earthRef.current.rotation.y-=Math.cos(rotatin)*0.01*Math.PI;
        earthRef.current.rotation.z+=Math.sin(rotatin)*0.01*Math.PI;
    } else if(e.key == 'ArrowUp'){
        if(!isRotating) setIsRotating(true);
        earthRef.current.rotation.x += -0.01*Math.PI;
    } else if(e.key == 'ArrowDown'){
      if(!isRotating) setIsRotating(true);
      earthRef.current.rotation.x += 0.01*Math.PI;
    }
  }

  const handleKeyUp = (e) => {
    if(e.key === 'ArrowLeft' || e.key==='ArrowRight' || e.key==='ArrowUp' || e.key==='ArrowDown'){
        setIsRotating(false);
    }
  }


  useFrame(() => {
    /*
    console.log("x: " +earthRef.current.rotation.x);
    console.log("y: " +earthRef.current.rotation.y);
    console.log("z: " +earthRef.current.rotation.z);
    */
    if(!isRotating){
      rotationSpeedX.current *= dampingFactor;
      rotationSpeedY.current *= dampingFactor;
      rotationSpeedZ.current *= dampingFactor;

      if(Math.abs(rotationSpeedX.current) < 0.001){
        rotationSpeedX.current=0;
      }

      if(Math.abs(rotationSpeedY.current) < 0.001){
        rotationSpeedY.current=0;
      }

      if(Math.abs(rotationSpeedZ.current) < 0.001){
        rotationSpeedZ.current=0;
      }

      earthRef.current.rotation.x += rotationSpeedX.current;
      earthRef.current.rotation.y += rotationSpeedY.current;
      earthRef.current.rotation.z += rotationSpeedZ.current;

    }
            
    

    // Set the current stage based on the earth's orientation
    if(earthRef.current.rotation.x>=-0.604 && earthRef.current.rotation.x<=-0.4579 && earthRef.current.rotation.y<=0.2575 && earthRef.current.rotation.y>=-0.1399 && earthRef.current.rotation.z>=0.2024 && earthRef.current.rotation.z<=0.4694){
      //MD
      setCurrentStage(1);
    }else if(earthRef.current.rotation.x>=-0.4384 && earthRef.current.rotation.x<=-0.2663 && earthRef.current.rotation.y<=0.2932 && earthRef.current.rotation.y>=-0.1384 && earthRef.current.rotation.z>=0.2251 && earthRef.current.rotation.z<=0.4337){
      //MTL
      setCurrentStage(2);
    }else if(earthRef.current.rotation.x>=-2.8794 && earthRef.current.rotation.x<=-2.7788 && earthRef.current.rotation.y<=0.4878 && earthRef.current.rotation.y>=-0.228 && earthRef.current.rotation.z>=-2.4689 && earthRef.current.rotation.z<=-2.2296){
      //France
      setCurrentStage(3);
    }else{
      setCurrentStage(null);
    }
      
      
    
  
  })
  
  useEffect(() => {
    const canvas = gl.domElement;
    canvas.addEventListener('pointerdown', handlePointerDown);
    canvas.addEventListener('pointerup', handlePointerUp);
    canvas.addEventListener('pointermove', handlePointerMove);
    document.addEventListener('keydown', handleKeyDown);
    document.addEventListener('keyup', handleKeyUp);

    return () => {
        canvas.removeEventListener('pointerdown', handlePointerDown);
        canvas.removeEventListener('pointerup', handlePointerUp);
        canvas.removeEventListener('pointermove', handlePointerMove);
        document.removeEventListener('keydown', handleKeyDown);
        document.removeEventListener('keyup', handleKeyUp);
    }
  }, [gl, handlePointerDown, handlePointerUp, handlePointerMove])

  return (
    
    <a.group ref={earthRef} {...props}>
      <mesh
        geometry={nodes.Object_2.geometry}
        material={materials['Material.001']}
        rotation={[-Math.PI/2, 0, Math.PI*3/2]}
      />
    </a.group>

  )
  

}

export default Earth;